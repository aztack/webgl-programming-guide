import { OOWebGLObject } from './object';
import { WebGLContext, ShaderSource } from './types';
import { OOWebGLShader } from './shader';
import { OOWebGL } from './context';
export declare class OOProgram extends OOWebGLObject {
    static bgColor: string;
    octx: OOWebGL;
    program: WebGLProgram;
    shaders: OOWebGLShader[];
    attributes: Record<string, number>;
    uniforms: Record<string, WebGLUniformLocation>;
    name: string;
    static create(ctx: WebGLContext, vss?: ShaderSource, fss?: ShaderSource): Promise<OOProgram>;
    constructor();
    init(ctx: WebGLContext): OOProgram;
    use(): OOProgram;
    attachShaders(...shaders: OOWebGLShader[]): this;
    deleteShaders(): this;
    link(): Promise<unknown>;
    linkAndUse(): Promise<OOProgram>;
    getParameter(name: number): any;
    get stat(): Record<string, any>;
    get linkStatus(): any;
    get valid(): any;
    get infoLog(): string | null;
    getAttribute(name: string): number;
    getUniform(name: string): WebGLUniformLocation;
    _setUniform(name: string, func: string, ...args: any[]): any;
    setUniform<T extends number>(name: string, x: T, y?: T, z?: T, w?: T): void;
    setAttribute(name: string, x: number): OOProgram;
    setAttribute(name: string, x: number, y: number): OOProgram;
    setAttribute(name: string, x: number, y: number, z: number): OOProgram;
    setAttribute(name: string, x: number, y: number, z: number, w: number): OOProgram;
    setAttribute(name: string, x: Float32List): OOProgram;
    destroy(): void;
    private ensureCreated;
}
